---
title: "Metadata schemas in the ManGO portal"
format:
    html:
        embed-resources: true
        theme: ../sass/main.scss
        toc: true
        title-block-banner: true
        title-block-banner-color: primary
    # pdf:
    #     language: en-GB
    #     date-format: iso
    gfm: default
    rst: default
date: 2023-03-27
date-modified: today
author: Mariana Montes
number-sections: true
toc: true
---

This article describes the ManGO portal functionalities related to metadata schemas: how to design them and how to apply them. Users who might want to design their own schemas independently and load them via JSON, as well as developers interested in implemented this feature outside the portal, are directed to [the technical specifications](metadata-schemas-tech.qmd).

One crucial principle of the metadata schema functionality in the ManGO portal is that schemas that can be used to apply metadata cannot be modified. In other words, for a schema to be used in metadata annotation it must be fixed and stable, while a schema that is undergoing changes cannot reliably be used for annotation. However, during the course of a research project it might be necessary to update a schema, and it would be impractical to create new schemas for every such change. In order to tackle this issue, the ManGO portal implements a lifecycle via versioning and tags. In short, a schema can evolve and its evolutions can be registered as new versions of the same schema. Each version can have one or three status: (1) 'draft', while it is being designed and edited; (2) published, when it is ready to be implemented; and (3) archived, when it should not be used anymore, maybe because a new version has been published.

In this context, the rest of this document will walk you through the process of creating, managing and applying metadata schemas.
First, @sec-draft will illustrate how to design a new schema from scratch and save a draft. Then, @sec-lifecycle will briefly discuss the stages of a schema in more detail, including how they can be managed in the Metadata Schema Manager. Finally, @sec-application will show how a published schema can be used to annotate metadata.

# Schema design {#sec-draft}

In order to design a new schema, we need to go to the "Metadata schemas" section via the left sidebar menu. This will first show a selection of projects ("realms") to which your schemas may belong to (@fig-realms). After choosing one, the schema manager per se is shown (see @fig-noschemas): it has a button to create a new schema, under which any existing schemas are listed. Clicking on the button opens up a form on which the schema can be designed. As shown in @fig-schemaeditor, it includes a field to provide a name, one for a user-facing title and a button to add a field.

::: {#fig-start layout="[[1,1], [1]]"}

![Choose a realm.](used-screenshots/01-realms.png){#fig-realms}

![The schemas in your realm.](used-screenshots/02-no-schemas.png){#fig-noschemas}

![An empty schema to start with.](used-screenshots/03-empty-schema.png){#fig-schemaeditor}

A new schema from scratch.
:::

The "Schema ID" field is meant for the unique ID or name of a schema and, like the "Schema label", is shared by all the versions of the same schema. Given an ID `book`, the attribute names of all the metadata fields belonging to this schema will be prefixed with `mgs.book.`. This is why some restrictions apply to the format of the ID: it can only contain lowercase letters, numbers, hyphens and underscores. In contrast, the label can be any type of name or title and will be used to represent the schema in user-facing interactions, as will be shown later. In this documentation, we will exemplify with a schema named `book` with the label "Book schema as an example".

The "Add element" button opens a modal that offers the different kinds of fields that can be added to a schema with examples (@fig-fields):

- Simple fields result in input fields for texts, numbers, dates and similar formats or a single checkbox.

- Single-value multiple fields result in a dropdown or radio buttons and are used when the metadata value must be one of a selection of possible values.

- Multiple-value multiple fields result in a dropdown or checkboxes and are used when the metadata value may be many of a selection of possible values. As a result, the same attribute name is repeated with different attribute values.

- Composite fields are like nested schemas: groups of other kinds of fields that describe the same concept.

::: {#fig-fields layout-ncol=2}

![Simple and multiple-choice fields.](used-screenshots/04-fields-1.png){#fig-fields1}

![Composite fields.](used-screenshots/05-fields-2.png){#fig-fields2}

Options to select a type of input field.
:::

<!-- IDEA: have one image per kind of field? -->

The blue buttons with the names of the types of fields open new modals with forms that can be used to design an instance of this field (see @fig-editors). All these forms start with two text fields to define an ID and a label for the field and end with a button to add the new field to the schema. In between there are more specific input fields used to refine the characteristics of the field you want to design as well as up to two switch buttons to implement optional properties.

::: {#fig-editors layout-ncol=2}

![Design a simple field.](used-screenshots/06-add-simple-field.png){#fig-simple}

![Design a single-value multiple-choice field.](used-screenshots/10-add-single-value-multiple.png){#fig-radio}

![Design a multiple-value multiple-choice field.](used-screenshots/17-add-multiple-value-multiple.png){#fig-checkbox}

![Design a single-value multiple-choice field.](used-screenshots/24-add-composite-field.png){#fig-composite}

Forms to design a new field.
:::

For example, clicking on "Simple field" will open the form in @fig-simple. After the common fields for ID and label, we see a dropdown menu that offers different kinds of simple fields: text, textbox, email, url, integer, float... If "integer" or "float" are chosen, two new fields show up in which you can provide minimum and maximum thresholds for the value of the field. Via the switches at the bottom we can make the field required (when filling the metadata, this field _has_ to be provided) and/or repeatable (when filling the metadata, we can create multiple copies with the same attribute name and different values). If it is required, we can also provide a default value. @fig-simplefull shows the same form as in @fig-simple after filling in some choices. The ID is now `text`, which means that when applying the schema this will create an attribute name `mgs.book.text`. The label is "Book title", so that the form to apply the metadata schema and the table used to inspect the existing metadata will show this label. The field is also required, but has no default value, and of type "text". Once we add it to the schema, the schema editor creates a box for it, as shown in @fig-simpleview. The title --but not the ID-- is shown, followed by an asterisk to indicate that the field is required. Underneath we see the input field as it would look like in the final form with a small clarification of the type of input field it is. On the top right corner fo the box, we also have some options to further manipulate the field and its position in the form. The arrows allow us to move the field up and down, but they are disabled at the moment because there are no other fields. The third button creates a quick copy of the field as an aid to create a similar one. The pencil reopens the editing modal if you want to change anything in the field, and the trash bin can be used to delete the field altogether.

::: {#fig-new-simple layout-ncol=2}

![A filled form for a simple field.](used-screenshots/08-title-simple-field.png){#fig-simplefull}

![View of a designed simple field.](used-screenshots/09-after-adding-field1.png){#fig-simpleview}

Designing a simple field.
:::

You can also see that in @fig-simpleview the box representing the `text` field now has two "Add element" buttons: one to add a field right before, and one to add a field right after. On clicking one of these buttons we open again the modal shown in @fig-fields and we can choose yet another type of field to add. @fig-new-radio shows how we can edit a multiple-choice field. As @fig-editors shows, the only differences between the editors for single-value and multiple-value multiple-choice fields are in the title of the modal and the possibility of defining a default value for the former type^[Note that this default value can only be defined during editing, as it does not respond to recent changes in the list of options]. However, the results are also different. If the "As dropdown" switch is activated (as in @fig-radiofull), the input field will look like a dropdown, but the number of options that can be selected from it depend on whether it's a single-value or multiple-value field. If it is not activated, single-value fields will be rendered as radio buttons, whereas multiple-value ones will be rendered as checkboxes. In any case, the middle part works in the same way: we start we two empty fields labeled "Select option" with three buttons to their right: two arrows and a trash bin. The arrows allow us to reorder the options, whereas the trash bin lets us remove one of the fields (but there cannot be fewer than two). The big "Add option" button creates a new input field for a new option, which must be either filled or deleted.

@fig-radioview shows how this dropdown with four possible values is rendered along the other field in the schema editor. Again, it is labeled as "Publishing house", although metadata assigned via this field will have the name `mgs.book.publisher`.

::: {#fig-new-radio layout-ncol=2}

![A filled form for a single-value multiple-choice field.](used-screenshots/15-publisher-svmc-field.png){#fig-radiofull}

![View of a designed single-value multiple-choice field.](used-screenshots/16-after-adding-field2.png){#fig-radioview}

Designing a single-value multiple-choice field.
:::

@fig-simpleview and @fig-radioview also show, at the bottom, two buttons: a green one labeled "Save draft" and a yellow one that reads "Publish". These buttons are also present in @fig-start, although in this case the "Publish" button is disabled. This is because it is possible to create a draft that has no fields yet, but not to publish it.
Once we save a draft, a new accordion item is created for the new schema in the page, with a tab for the draft version. @fig-saved shows this tab after also adding a non-required checkbox field between "Book title" and "Publishing house" and saving the draft. The tab itself shows the version number and status of this version and contains three buttons: one to view the form as it will be shown when applying metadata, one to edit it, which opens a tab that looks just like the editor we were working on, and one to discard the draft. By clicking on "Discard" we see a modal that asks for confirmation: if we accept, all traces of this schema will be removed, because the draft is its only existing version.

![New draft.](used-screenshots/22-save-draft1.png){#fig-saved}

While the draft has not been published, we can still edit it: add new fields, change them, reorder them, remove them... It is also possible to change the title or label of the schema itself, but not to change the ID. If we want to add a composite field, @fig-composite shows that the editor starts like the editors of other fields, but then just has an "Add element" button, which behaves exactly like the "Add element" button of a schema: it oppens the modal in @fig-fields, which in turn opens the modal of the chosen field types. @fig-compositefull shows an editor for a composite field to which we have added three simple fields: a required "Name and surname" of type text, an "Age" of type integer with a minimum value of 12 and a maximum value of 99, and a required, repeatable "Email address" of type email. Once we add the composite field to the schema, its editing box shows its components as they will appear in the final form; in order to edit them, we first need to edit the composite field itself.

::: {#fig-new-composite layout-ncol=2}

![A filled form for a composite field.](used-screenshots/26-author-composite-field.png){#fig-compositefull}

![View of a designed composite field.](used-screenshots/27-view-composite.png){#fig-compositeview}

Designing a composite field.
:::

# Versioning and lifecycle {#sec-lifecycle}

Once we consider that the current state of this draft is ready to be applied, we can publish it. This will update the tab so that the orange badge "draft" is replaced with a green one reading "published", and change the options provided in the top right buttons. @fig-published shows that, next to "View", which shows the form as it will appear when applying the metadata schema, the rest of the buttons have changed. "New (draft) version" and "Copy to new schema" open editors like "Edit" did for the draft schemas. The difference is that saving the draft in the former will create version 2.0.0 of this schema (thus creating a new tab next to this one), whereas the latter will create a whole new schema based on the current one. Archiving a published version of a schema will prevent it from being implemented, but won't delete it.

![A published version of a schema](used-screenshots/34-view-published.png){#fig-published}


# Apply metadata with a schema {#sec-application}

In order to apply a metadata schema, it should be selected from the dropdown in the "Metadata" tab of the data object or collection that must be annotated, as shown in @fig-selectschema. This will open a page with the form shown in @fig-apply, which is a usable version of what we could see in the "View" tab of the published schema. Required fields have an asterisk next to their name, the simple fields have a short description under the input fields and repeatable fields have a button that can be used to duplicate them. 

::: {#fig-annotationform layout-ncol=2}

![Select a published metadata schema.](used-screenshots/41-apply.png){#fig-selectschema}

![Empty form to apply a metadata schema](used-screenshots/42-apply-form.png){#fig-apply}

Apply a metadata schema.
:::

If a required field is not provided, it won't be possible to save the metadata. Once we do save it, we can see the results in a tab inside the "Metadata" tab of the object. @fig-viewann shows that the user-facing label of the schema, not its name, is used to name the tab, and that the labels of the different fields are used in the table that shows the current annotation. Hovering over the labels will show a small popover with the name that the AVU takes in ManGO, e.g. `mgs.book.text` for the book tite, `mgs.book.author.email` for the email address inside the Author composite field, etc. Moreover, fields for which no values have been provided can still be seen as empty, to indicate that the schema has not been completely implemented.

![All metadata fields are shown, with or without values.](used-screenshots/45-view-annotation.png){#fig-viewann}
